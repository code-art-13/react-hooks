{"version":3,"sources":["components/ClassCounter.js","App.js","serviceWorker.js","index.js"],"names":["i","log","message","console","ClassCounter","props","state","counter","showCounter","increment","setState","decrement","style","border","margin","padding","this","onClick","PureComponent","App","showClassCounter","toggleShowClassCounter","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"iPACIA,G,MAAI,GACFC,EAAM,SAACC,GACTC,QAAQF,IAAR,UAAeC,EAAf,YAA0BF,IAC1BA,KAEiBI,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAAS,EACTC,aAAa,GAEjB,EAAKC,UAAY,WACb,EAAKC,UAAS,SAAAJ,GAAK,MAAK,CAAEC,QAASD,EAAMC,QAAU,MAC/C,kBAAMJ,QAAQF,IAAI,0BAA4B,EAAKK,MAAMC,aAGjE,EAAKI,UAAY,WACb,EAAKD,UAAS,SAAAJ,GAAK,MAAK,CAAEC,QAASD,EAAMC,QAAU,MAC/C,kBAAMJ,QAAQF,IAAI,0BAA4B,EAAKK,MAAMC,aAGjEN,EAAI,eAhBW,E,gEAmBfA,EAAI,uB,2CAGJA,EAAI,wB,6CAGJA,EAAI,0B,+BAKJ,OADAA,EAAI,UAEA,yBAAKW,MAAO,CAACC,OAAQ,YAAaC,OAAQ,OAAQC,QAAS,SACvD,0CAAgBC,KAAKV,MAAMC,QAA3B,KACA,6BACI,4BAAQU,QAASD,KAAKP,WAAW,oCACjC,4BAAQQ,QAASD,KAAKL,WAAW,0C,GApCXO,iB,ICFrBC,E,kDACnB,aAAc,IAAD,8BACX,gBACKb,MAAQ,CACXc,kBAAkB,GAEpB,EAAKC,uBAAyB,WAC5B,EAAKX,UAAS,SAACJ,GAAD,sBAAgBA,EAAhB,GAA0B,CAACc,kBAAmBd,EAAMc,uBANzD,E,qDAUX,OACE,6BACE,4BAAQH,QAASD,KAAKK,wBAAwB,4BAAKL,KAAKV,MAAMc,iBAAkB,OAAQ,OAA1C,mBAC7CJ,KAAKV,MAAMc,kBAAoB,kBAAC,EAAD,W,GAdPE,aCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMtC,a","file":"static/js/main.37291746.chunk.js","sourcesContent":["import React, { Component, PureComponent } from 'react'\nlet i = 0;\nconst log = (message) => {\n    console.log(`${message} ${i}`);\n    i++;\n}\nexport default class ClassCounter extends PureComponent {\n    constructor(props) {\n        super(props)\n        this.state = {\n            counter: 0,\n            showCounter: true\n        }\n        this.increment = () => {\n            this.setState(state => ({ counter: state.counter + 1 }),\n                () => console.log('incremented counter to ' + this.state.counter)\n            );\n        }\n        this.decrement = () => {\n            this.setState(state => ({ counter: state.counter - 1 }),\n                () => console.log('decremented counter to ' + this.state.counter)\n            );\n        }\n        log('constructor')\n    }\n    componentDidMount() {\n        log('componentDidMount')\n    }\n    componentDidUpdate() {\n        log('componentDidUpdate')\n    }\n    componentWillUnmount(){\n        log('componentWillUnmount')\n    }\n   \n    render() {\n        log(\"render\")\n        return (\n            <div style={{border: '1px solid', margin: '10px', padding: '10px'}}>\n                <div> Counter: {this.state.counter} </div>\n                <div>\n                    <button onClick={this.increment}><span>+</span></button>\n                    <button onClick={this.decrement}><span>-</span></button>\n                </div>\n             \n            </div>\n        )\n    }\n}\n\n","import React, {Component} from 'react';\nimport './App.css';\nimport { ClassCounter, FunctionalCounter } from './components'\n\nexport default class App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      showClassCounter: true,\n    }\n    this.toggleShowClassCounter = () => {\n      this.setState((state) => ({...state, ...{showClassCounter: !state.showClassCounter}}))\n  }\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.toggleShowClassCounter}><h1>{this.state.showClassCounter? 'Hide': 'Show'} Class Counter</h1></button>\n        {this.state.showClassCounter && <ClassCounter />}\n      </div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}